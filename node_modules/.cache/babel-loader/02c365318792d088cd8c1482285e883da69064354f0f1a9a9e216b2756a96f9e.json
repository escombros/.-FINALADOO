{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive, defineComponent, inject, h, provide, ref, getCurrentInstance, watch, nextTick, resolveComponent, withDirectives, openBlock, createBlock, withModifiers, createVNode, createCommentVNode, withCtx, Fragment, renderList, vShow, onMounted, onBeforeUnmount, onUpdated, computed, toDisplayString } from 'vue';\nimport ElCollapseTransition from '../el-collapse-transition';\nimport ElCheckbox from '../el-checkbox';\nimport mitt from 'mitt';\nimport { removeClass, addClass, on, off } from '../utils/dom';\nimport { EVENT_CODE } from '../utils/aria';\nimport { useLocaleInject } from '../hooks';\n\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\nconst EMPTY_OBJ = process.env.NODE_ENV !== 'production' ? Object.freeze({}) : {};\nconst EMPTY_ARR = process.env.NODE_ENV !== 'production' ? Object.freeze([]) : [];\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\nconst NODE_KEY = \"$treeNodeId\";\nconst markNodeData = function (node, data) {\n  if (!data || data[NODE_KEY]) return;\n  Object.defineProperty(data, NODE_KEY, {\n    value: node.id,\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n};\nconst getNodeKey = function (key, data) {\n  if (!key) return data[NODE_KEY];\n  return data[key];\n};\nconst getChildState = node => {\n  let all = true;\n  let none = true;\n  let allWithoutDisable = true;\n  for (let i = 0, j = node.length; i < j; i++) {\n    const n = node[i];\n    if (n.checked !== true || n.indeterminate) {\n      all = false;\n      if (!n.disabled) {\n        allWithoutDisable = false;\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false;\n    }\n  }\n  return {\n    all,\n    none,\n    allWithoutDisable,\n    half: !all && !none\n  };\n};\nconst reInitChecked = function (node) {\n  if (node.childNodes.length === 0) return;\n  const {\n    all,\n    none,\n    half\n  } = getChildState(node.childNodes);\n  if (all) {\n    node.checked = true;\n    node.indeterminate = false;\n  } else if (half) {\n    node.checked = false;\n    node.indeterminate = true;\n  } else if (none) {\n    node.checked = false;\n    node.indeterminate = false;\n  }\n  const parent = node.parent;\n  if (!parent || parent.level === 0) return;\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent);\n  }\n};\nconst getPropertyFromData = function (node, prop) {\n  const props = node.store.props;\n  const data = node.data || {};\n  const config = props[prop];\n  if (typeof config === \"function\") {\n    return config(data, node);\n  } else if (typeof config === \"string\") {\n    return data[config];\n  } else if (typeof config === \"undefined\") {\n    const dataProp = data[prop];\n    return dataProp === void 0 ? \"\" : dataProp;\n  }\n};\nlet nodeIdSeed = 0;\nclass Node {\n  constructor(options) {\n    this.id = nodeIdSeed++;\n    this.text = null;\n    this.checked = false;\n    this.indeterminate = false;\n    this.data = null;\n    this.expanded = false;\n    this.parent = null;\n    this.visible = true;\n    this.isCurrent = false;\n    this.canFocus = false;\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name];\n      }\n    }\n    this.level = 0;\n    this.loaded = false;\n    this.childNodes = [];\n    this.loading = false;\n    if (this.parent) {\n      this.level = this.parent.level + 1;\n    }\n  }\n  initialize() {\n    const store = this.store;\n    if (!store) {\n      throw new Error(\"[Node]store is required!\");\n    }\n    store.registerNode(this);\n    const props = store.props;\n    if (props && typeof props.isLeaf !== \"undefined\") {\n      const isLeaf = getPropertyFromData(this, \"isLeaf\");\n      if (typeof isLeaf === \"boolean\") {\n        this.isLeafByUser = isLeaf;\n      }\n    }\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data);\n      if (store.defaultExpandAll) {\n        this.expanded = true;\n        this.canFocus = true;\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand();\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data);\n    }\n    if (!this.data) return;\n    const defaultExpandedKeys = store.defaultExpandedKeys;\n    const key = store.key;\n    if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {\n      this.expand(null, store.autoExpandParent);\n    }\n    if (key && store.currentNodeKey !== void 0 && this.key === store.currentNodeKey) {\n      store.currentNode = this;\n      store.currentNode.isCurrent = true;\n    }\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this);\n    }\n    this.updateLeafState();\n    if (this.parent && (this.level === 1 || this.parent.expanded === true)) this.canFocus = true;\n  }\n  setData(data) {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data);\n    }\n    this.data = data;\n    this.childNodes = [];\n    let children;\n    if (this.level === 0 && this.data instanceof Array) {\n      children = this.data;\n    } else {\n      children = getPropertyFromData(this, \"children\") || [];\n    }\n    for (let i = 0, j = children.length; i < j; i++) {\n      this.insertChild({\n        data: children[i]\n      });\n    }\n  }\n  get label() {\n    return getPropertyFromData(this, \"label\");\n  }\n  get key() {\n    const nodeKey = this.store.key;\n    if (this.data) return this.data[nodeKey];\n    return null;\n  }\n  get disabled() {\n    return getPropertyFromData(this, \"disabled\");\n  }\n  get nextSibling() {\n    const parent = this.parent;\n    if (parent) {\n      const index = parent.childNodes.indexOf(this);\n      if (index > -1) {\n        return parent.childNodes[index + 1];\n      }\n    }\n    return null;\n  }\n  get previousSibling() {\n    const parent = this.parent;\n    if (parent) {\n      const index = parent.childNodes.indexOf(this);\n      if (index > -1) {\n        return index > 0 ? parent.childNodes[index - 1] : null;\n      }\n    }\n    return null;\n  }\n  contains(target, deep = true) {\n    return (this.childNodes || []).some(child => child === target || deep && child.contains(target));\n  }\n  remove() {\n    const parent = this.parent;\n    if (parent) {\n      parent.removeChild(this);\n    }\n  }\n  insertChild(child, index, batch) {\n    if (!child) throw new Error(\"insertChild error: child is required.\");\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        const children = this.getChildren(true);\n        if (children.indexOf(child.data) === -1) {\n          if (typeof index === \"undefined\" || index < 0) {\n            children.push(child.data);\n          } else {\n            children.splice(index, 0, child.data);\n          }\n        }\n      }\n      Object.assign(child, {\n        parent: this,\n        store: this.store\n      });\n      child = reactive(new Node(child));\n      if (child instanceof Node) {\n        child.initialize();\n      }\n    }\n    child.level = this.level + 1;\n    if (typeof index === \"undefined\" || index < 0) {\n      this.childNodes.push(child);\n    } else {\n      this.childNodes.splice(index, 0, child);\n    }\n    this.updateLeafState();\n  }\n  insertBefore(child, ref) {\n    let index;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n    }\n    this.insertChild(child, index);\n  }\n  insertAfter(child, ref) {\n    let index;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n      if (index !== -1) index += 1;\n    }\n    this.insertChild(child, index);\n  }\n  removeChild(child) {\n    const children = this.getChildren() || [];\n    const dataIndex = children.indexOf(child.data);\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1);\n    }\n    const index = this.childNodes.indexOf(child);\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child);\n      child.parent = null;\n      this.childNodes.splice(index, 1);\n    }\n    this.updateLeafState();\n  }\n  removeChildByData(data) {\n    let targetNode = null;\n    for (let i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i];\n        break;\n      }\n    }\n    if (targetNode) {\n      this.removeChild(targetNode);\n    }\n  }\n  expand(callback, expandParent) {\n    const done = () => {\n      if (expandParent) {\n        let parent = this.parent;\n        while (parent.level > 0) {\n          parent.expanded = true;\n          parent = parent.parent;\n        }\n      }\n      this.expanded = true;\n      if (callback) callback();\n      this.childNodes.forEach(item => {\n        item.canFocus = true;\n      });\n    };\n    if (this.shouldLoadData()) {\n      this.loadData(data => {\n        if (Array.isArray(data)) {\n          if (this.checked) {\n            this.setChecked(true, true);\n          } else if (!this.store.checkStrictly) {\n            reInitChecked(this);\n          }\n          done();\n        }\n      });\n    } else {\n      done();\n    }\n  }\n  doCreateChildren(array, defaultProps = {}) {\n    array.forEach(item => {\n      this.insertChild(Object.assign({\n        data: item\n      }, defaultProps), void 0, true);\n    });\n  }\n  collapse() {\n    this.expanded = false;\n    this.childNodes.forEach(item => {\n      item.canFocus = false;\n    });\n  }\n  shouldLoadData() {\n    return this.store.lazy === true && this.store.load && !this.loaded;\n  }\n  updateLeafState() {\n    if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== \"undefined\") {\n      this.isLeaf = this.isLeafByUser;\n      return;\n    }\n    const childNodes = this.childNodes;\n    if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {\n      this.isLeaf = !childNodes || childNodes.length === 0;\n      return;\n    }\n    this.isLeaf = false;\n  }\n  setChecked(value, deep, recursion, passValue) {\n    this.indeterminate = value === \"half\";\n    this.checked = value === true;\n    if (this.store.checkStrictly) return;\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      const {\n        all,\n        allWithoutDisable\n      } = getChildState(this.childNodes);\n      if (!this.isLeaf && !all && allWithoutDisable) {\n        this.checked = false;\n        value = false;\n      }\n      const handleDescendants = () => {\n        if (deep) {\n          const childNodes = this.childNodes;\n          for (let i = 0, j = childNodes.length; i < j; i++) {\n            const child = childNodes[i];\n            passValue = passValue || value !== false;\n            const isCheck = child.disabled ? child.checked : passValue;\n            child.setChecked(isCheck, deep, true, passValue);\n          }\n          const {\n            half,\n            all: all2\n          } = getChildState(childNodes);\n          if (!all2) {\n            this.checked = all2;\n            this.indeterminate = half;\n          }\n        }\n      };\n      if (this.shouldLoadData()) {\n        this.loadData(() => {\n          handleDescendants();\n          reInitChecked(this);\n        }, {\n          checked: value !== false\n        });\n        return;\n      } else {\n        handleDescendants();\n      }\n    }\n    const parent = this.parent;\n    if (!parent || parent.level === 0) return;\n    if (!recursion) {\n      reInitChecked(parent);\n    }\n  }\n  getChildren(forceInit = false) {\n    if (this.level === 0) return this.data;\n    const data = this.data;\n    if (!data) return null;\n    const props = this.store.props;\n    let children = \"children\";\n    if (props) {\n      children = props.children || \"children\";\n    }\n    if (data[children] === void 0) {\n      data[children] = null;\n    }\n    if (forceInit && !data[children]) {\n      data[children] = [];\n    }\n    return data[children];\n  }\n  updateChildren() {\n    const newData = this.getChildren() || [];\n    const oldData = this.childNodes.map(node => node.data);\n    const newDataMap = {};\n    const newNodes = [];\n    newData.forEach((item, index) => {\n      const key = item[NODE_KEY];\n      const isNodeExists = !!key && oldData.findIndex(data => data[NODE_KEY] === key) >= 0;\n      if (isNodeExists) {\n        newDataMap[key] = {\n          index,\n          data: item\n        };\n      } else {\n        newNodes.push({\n          index,\n          data: item\n        });\n      }\n    });\n    if (!this.store.lazy) {\n      oldData.forEach(item => {\n        if (!newDataMap[item[NODE_KEY]]) this.removeChildByData(item);\n      });\n    }\n    newNodes.forEach(({\n      index,\n      data\n    }) => {\n      this.insertChild({\n        data\n      }, index);\n    });\n    this.updateLeafState();\n  }\n  loadData(callback, defaultProps = {}) {\n    if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {\n      this.loading = true;\n      const resolve = children => {\n        this.loaded = true;\n        this.loading = false;\n        this.childNodes = [];\n        this.doCreateChildren(children, defaultProps);\n        this.updateLeafState();\n        if (callback) {\n          callback.call(this, children);\n        }\n      };\n      this.store.load(this, resolve);\n    } else {\n      if (callback) {\n        callback.call(this);\n      }\n    }\n  }\n}\nclass TreeStore {\n  constructor(options) {\n    this.currentNode = null;\n    this.currentNodeKey = null;\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n    this.nodesMap = {};\n  }\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this\n    });\n    this.root.initialize();\n    if (this.lazy && this.load) {\n      const loadFn = this.load;\n      loadFn(this.root, data => {\n        this.root.doCreateChildren(data);\n        this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n  filter(value) {\n    const filterNodeMethod = this.filterNodeMethod;\n    const lazy = this.lazy;\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n        traverse(child);\n      });\n      if (!node.visible && childNodes.length) {\n        let allHidden = true;\n        allHidden = !childNodes.some(child => child.visible);\n        if (node.root) {\n          node.root.visible = allHidden === false;\n        } else {\n          node.visible = allHidden === false;\n        }\n      }\n      if (!value) return;\n      if (node.visible && !node.isLeaf && !lazy) node.expand();\n    };\n    traverse(this);\n  }\n  setData(newVal) {\n    const instanceChanged = newVal !== this.root.data;\n    if (instanceChanged) {\n      this.root.setData(newVal);\n      this._initDefaultCheckedNodes();\n    } else {\n      this.root.updateChildren();\n    }\n  }\n  getNode(data) {\n    if (data instanceof Node) return data;\n    const key = typeof data !== \"object\" ? data : getNodeKey(this.key, data);\n    return this.nodesMap[key] || null;\n  }\n  insertBefore(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertBefore({\n      data\n    }, refNode);\n  }\n  insertAfter(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertAfter({\n      data\n    }, refNode);\n  }\n  remove(data) {\n    const node = this.getNode(data);\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null;\n      }\n      node.parent.removeChild(node);\n    }\n  }\n  append(data, parentData) {\n    const parentNode = parentData ? this.getNode(parentData) : this.root;\n    if (parentNode) {\n      parentNode.insertChild({\n        data\n      });\n    }\n  }\n  _initDefaultCheckedNodes() {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    const nodesMap = this.nodesMap;\n    defaultCheckedKeys.forEach(checkedKey => {\n      const node = nodesMap[checkedKey];\n      if (node) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    });\n  }\n  _initDefaultCheckedNode(node) {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  }\n  setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n      this._initDefaultCheckedNodes();\n    }\n  }\n  registerNode(node) {\n    const key = this.key;\n    if (!node || !node.data) return;\n    if (!key) {\n      this.nodesMap[node.id] = node;\n    } else {\n      const nodeKey = node.key;\n      if (nodeKey !== void 0) this.nodesMap[node.key] = node;\n    }\n  }\n  deregisterNode(node) {\n    const key = this.key;\n    if (!key || !node || !node.data) return;\n    node.childNodes.forEach(child => {\n      this.deregisterNode(child);\n    });\n    delete this.nodesMap[node.key];\n  }\n  getCheckedNodes(leafOnly = false, includeHalfChecked = false) {\n    const checkedNodes = [];\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n          checkedNodes.push(child.data);\n        }\n        traverse(child);\n      });\n    };\n    traverse(this);\n    return checkedNodes;\n  }\n  getCheckedKeys(leafOnly = false) {\n    return this.getCheckedNodes(leafOnly).map(data => (data || {})[this.key]);\n  }\n  getHalfCheckedNodes() {\n    const nodes = [];\n    const traverse = function (node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach(child => {\n        if (child.indeterminate) {\n          nodes.push(child.data);\n        }\n        traverse(child);\n      });\n    };\n    traverse(this);\n    return nodes;\n  }\n  getHalfCheckedKeys() {\n    return this.getHalfCheckedNodes().map(data => (data || {})[this.key]);\n  }\n  _getAllNodes() {\n    const allNodes = [];\n    const nodesMap = this.nodesMap;\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n    return allNodes;\n  }\n  updateChildren(key, data) {\n    const node = this.nodesMap[key];\n    if (!node) return;\n    const childNodes = node.childNodes;\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i];\n      this.remove(child.data);\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i];\n      this.append(child, node.data);\n    }\n  }\n  _setCheckedKeys(key, leafOnly = false, checkedKeys) {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level);\n    const cache = Object.create(null);\n    const keys = Object.keys(checkedKeys);\n    allNodes.forEach(node => node.setChecked(false, false));\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i];\n      const nodeKey = node.data[key].toString();\n      const checked = keys.indexOf(nodeKey) > -1;\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false);\n        }\n        continue;\n      }\n      let parent = node.parent;\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true;\n        parent = parent.parent;\n      }\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false);\n        continue;\n      }\n      node.setChecked(true, true);\n      if (leafOnly) {\n        node.setChecked(false, false);\n        const traverse = function (node2) {\n          const childNodes = node2.childNodes;\n          childNodes.forEach(child => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false);\n            }\n            traverse(child);\n          });\n        };\n        traverse(node);\n      }\n    }\n  }\n  setCheckedNodes(array, leafOnly = false) {\n    const key = this.key;\n    const checkedKeys = {};\n    array.forEach(item => {\n      checkedKeys[(item || {})[key]] = true;\n    });\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n  setCheckedKeys(keys, leafOnly = false) {\n    this.defaultCheckedKeys = keys;\n    const key = this.key;\n    const checkedKeys = {};\n    keys.forEach(key2 => {\n      checkedKeys[key2] = true;\n    });\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n  setDefaultExpandedKeys(keys) {\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n    keys.forEach(key => {\n      const node = this.getNode(key);\n      if (node) node.expand(null, this.autoExpandParent);\n    });\n  }\n  setChecked(data, checked, deep) {\n    const node = this.getNode(data);\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  }\n  getCurrentNode() {\n    return this.currentNode;\n  }\n  setCurrentNode(currentNode) {\n    const prevCurrentNode = this.currentNode;\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false;\n    }\n    this.currentNode = currentNode;\n    this.currentNode.isCurrent = true;\n  }\n  setUserCurrentNode(node, shouldAutoExpandParent = true) {\n    const key = node[this.key];\n    const currNode = this.nodesMap[key];\n    this.setCurrentNode(currNode);\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true);\n    }\n  }\n  setCurrentNodeKey(key, shouldAutoExpandParent = true) {\n    if (key === null || key === void 0) {\n      this.currentNode && (this.currentNode.isCurrent = false);\n      this.currentNode = null;\n      return;\n    }\n    const node = this.getNode(key);\n    if (node) {\n      this.setCurrentNode(node);\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }\n}\nvar script = defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    renderContent: Function\n  },\n  setup(props) {\n    const nodeInstance = inject(\"NodeInstance\");\n    const tree = inject(\"RootTree\");\n    return () => {\n      const node = props.node;\n      const {\n        data,\n        store\n      } = node;\n      return props.renderContent ? props.renderContent(h, {\n        _self: nodeInstance,\n        node,\n        data,\n        store\n      }) : tree.ctx.slots.default ? tree.ctx.slots.default({\n        node,\n        data\n      }) : h(\"span\", {\n        class: \"el-tree-node__label\"\n      }, [node.label]);\n    };\n  }\n});\nscript.__file = \"packages/tree/src/tree-node-content.vue\";\nfunction useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject(\"TreeNodeMap\", null);\n  const currentNodeMap = {\n    treeNodeExpand: node => {\n      if (props.node !== node) {\n        props.node.collapse();\n      }\n    },\n    children: []\n  };\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n  provide(\"TreeNodeMap\", currentNodeMap);\n  return {\n    broadcastExpanded: node => {\n      if (!props.accordion) return;\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node);\n      }\n    }\n  };\n}\nfunction useDragNodeHandler({\n  props,\n  ctx,\n  el$,\n  dropIndicator$,\n  store\n}) {\n  const emitter = mitt();\n  provide(\"DragNodeEmitter\", emitter);\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null\n  });\n  emitter.on(\"tree-node-drag-start\", ({\n    event,\n    treeNode\n  }) => {\n    if (typeof props.allowDrag === \"function\" && !props.allowDrag(treeNode.node)) {\n      event.preventDefault();\n      return false;\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n    try {\n      event.dataTransfer.setData(\"text/plain\", \"\");\n    } catch (e) {}\n    dragState.value.draggingNode = treeNode;\n    ctx.emit(\"node-drag-start\", treeNode.node, event);\n  });\n  emitter.on(\"tree-node-drag-over\", ({\n    event,\n    treeNode\n  }) => {\n    const dropNode = treeNode;\n    const oldDropNode = dragState.value.dropNode;\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, \"is-drop-inner\");\n    }\n    const draggingNode = dragState.value.draggingNode;\n    if (!draggingNode || !dropNode) return;\n    let dropPrev = true;\n    let dropInner = true;\n    let dropNext = true;\n    let userAllowDropInner = true;\n    if (typeof props.allowDrop === \"function\") {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, \"prev\");\n      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, \"inner\");\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, \"next\");\n    }\n    event.dataTransfer.dropEffect = dropInner ? \"move\" : \"none\";\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit(\"node-drag-leave\", draggingNode.node, oldDropNode.node, event);\n      }\n      ctx.emit(\"node-drag-enter\", draggingNode.node, dropNode.node, event);\n    }\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode;\n    }\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false;\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false;\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false;\n    }\n    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n      dropPrev = false;\n      dropInner = false;\n      dropNext = false;\n    }\n    const targetPosition = dropNode.$el.getBoundingClientRect();\n    const treePosition = el$.value.getBoundingClientRect();\n    let dropType;\n    const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n    const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n    let indicatorTop = -9999;\n    const distance = event.clientY - targetPosition.top;\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = \"before\";\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = \"after\";\n    } else if (dropInner) {\n      dropType = \"inner\";\n    } else {\n      dropType = \"none\";\n    }\n    const iconPosition = dropNode.$el.querySelector(\".el-tree-node__expand-icon\").getBoundingClientRect();\n    const dropIndicator = dropIndicator$.value;\n    if (dropType === \"before\") {\n      indicatorTop = iconPosition.top - treePosition.top;\n    } else if (dropType === \"after\") {\n      indicatorTop = iconPosition.bottom - treePosition.top;\n    }\n    dropIndicator.style.top = indicatorTop + \"px\";\n    dropIndicator.style.left = iconPosition.right - treePosition.left + \"px\";\n    if (dropType === \"inner\") {\n      addClass(dropNode.$el, \"is-drop-inner\");\n    } else {\n      removeClass(dropNode.$el, \"is-drop-inner\");\n    }\n    dragState.value.showDropIndicator = dropType === \"before\" || dropType === \"after\";\n    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;\n    dragState.value.dropType = dropType;\n    ctx.emit(\"node-drag-over\", draggingNode.node, dropNode.node, event);\n  });\n  emitter.on(\"tree-node-drag-end\", event => {\n    const {\n      draggingNode,\n      dropType,\n      dropNode\n    } = dragState.value;\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = {\n        data: draggingNode.node.data\n      };\n      if (dropType !== \"none\") {\n        draggingNode.node.remove();\n      }\n      if (dropType === \"before\") {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"after\") {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"inner\") {\n        dropNode.node.insertChild(draggingNodeCopy);\n      }\n      if (dropType !== \"none\") {\n        store.value.registerNode(draggingNodeCopy);\n      }\n      removeClass(dropNode.$el, \"is-drop-inner\");\n      ctx.emit(\"node-drag-end\", draggingNode.node, dropNode.node, dropType, event);\n      if (dropType !== \"none\") {\n        ctx.emit(\"node-drop\", draggingNode.node, dropNode.node, dropType, event);\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit(\"node-drag-end\", draggingNode.node, null, dropType, event);\n    }\n    dragState.value.showDropIndicator = false;\n    dragState.value.draggingNode = null;\n    dragState.value.dropNode = null;\n    dragState.value.allowDrop = true;\n  });\n  return {\n    dragState\n  };\n}\nfunction useDragNodeEmitter() {\n  const emitter = inject(\"DragNodeEmitter\");\n  return {\n    emitter\n  };\n}\nvar script$1 = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent: script\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const {\n      emitter\n    } = useDragNodeEmitter();\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      console.warn(\"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = () => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      emitter.emit(\"tree-node-drag-start\", {\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      if (!tree.props.draggable) return;\n      emitter.emit(\"tree-node-drag-over\", {\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n      event.preventDefault();\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      emitter.emit(\"tree-node-drag-end\", event);\n    };\n    return {\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      emitter,\n      getNodeKey: getNodeKey$1,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd\n    };\n  }\n});\nconst _hoisted_1 = {\n  key: 1,\n  class: \"el-tree-node__loading-icon el-icon-loading\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createBlock(\"div\", {\n    ref: \"node$\",\n    class: [\"el-tree-node\", {\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.node.isCurrent,\n      \"is-hidden\": !_ctx.node.visible,\n      \"is-focusable\": !_ctx.node.disabled,\n      \"is-checked\": !_ctx.node.disabled && _ctx.node.checked\n    }],\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[4] || (_cache[4] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[7] || (_cache[7] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[8] || (_cache[8] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createVNode(\"div\", {\n    class: \"el-tree-node__content\",\n    style: {\n      \"padding-left\": (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    }\n  }, [createVNode(\"span\", {\n    class: [{\n      \"is-leaf\": _ctx.node.isLeaf,\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }, \"el-tree-node__expand-icon\", _ctx.tree.props.iconClass ? _ctx.tree.props.iconClass : \"el-icon-caret-right\"],\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleExpandIconClick && _ctx.handleExpandIconClick(...args), [\"stop\"]))\n  }, null, 2), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 0,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(\"span\", _hoisted_1)) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 4), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createBlock(\"div\", {\n      key: 0,\n      class: \"el-tree-node__children\",\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"onNodeExpand\"]);\n    }), 128))], 8, [\"aria-expanded\"])), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"])), [[vShow, _ctx.node.visible]]);\n}\nscript$1.render = render;\nscript$1.__file = \"packages/tree/src/tree-node.vue\";\nfunction useKeydown({\n  el$\n}, store) {\n  const treeItems = ref([]);\n  const checkboxItems = ref([]);\n  onMounted(() => {\n    initTabIndex();\n    on(el$.value, \"keydown\", handleKeydown);\n  });\n  onBeforeUnmount(() => {\n    off(el$.value, \"keydown\", handleKeydown);\n  });\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, val => {\n    val.forEach(checkbox => {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n  const handleKeydown = ev => {\n    const currentItem = ev.target;\n    if (currentItem.className.indexOf(\"el-tree-node\") === -1) return;\n    const code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    const currentIndex = treeItems.value.indexOf(currentItem);\n    let nextIndex;\n    if ([EVENT_CODE.up, EVENT_CODE.down].indexOf(code) > -1) {\n      ev.preventDefault();\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].indexOf(code) > -1) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n    const hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n    if ([EVENT_CODE.enter, EVENT_CODE.space].indexOf(code) > -1 && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n  const initTabIndex = () => {\n    var _a;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    const checkedItem = el$.value.querySelectorAll(\".is-checked[role=treeitem]\");\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\nvar script$2 = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode: script$1\n  },\n  props: {\n    data: {\n      type: Array\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default() {\n        return {\n          children: \"children\",\n          label: \"label\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    iconClass: String\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocaleInject();\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.defaultExpandedKeys = newVal;\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n    const remove = data => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\nconst _hoisted_1$1 = {\n  key: 0,\n  class: \"el-tree__empty-block\"\n};\nconst _hoisted_2 = {\n  class: \"el-tree__empty-text\"\n};\nconst _hoisted_3 = {\n  ref: \"dropIndicator$\",\n  class: \"el-tree__drop-indicator\"\n};\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createBlock(\"div\", {\n    ref: \"el$\",\n    class: [\"el-tree\", {\n      \"el-tree--highlight-current\": _ctx.highlightCurrent,\n      \"is-dragging\": !!_ctx.dragState.draggingNode,\n      \"is-drop-not-allow\": !_ctx.dragState.allowDrop,\n      \"is-drop-inner\": _ctx.dragState.dropType === \"inner\"\n    }],\n    role: \"tree\"\n  }, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createBlock(\"div\", _hoisted_1$1, [createVNode(\"span\", _hoisted_2, toDisplayString(_ctx.emptyText || _ctx.t(\"el.tree.emptyText\")), 1)])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(\"div\", _hoisted_3, null, 512), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\nscript$2.render = render$1;\nscript$2.__file = \"packages/tree/src/tree.vue\";\nscript$2.install = app => {\n  app.component(script$2.name, script$2);\n};\nconst _Tree = script$2;\nexport default _Tree;","map":{"version":3,"names":["reactive","defineComponent","inject","h","provide","ref","getCurrentInstance","watch","nextTick","resolveComponent","withDirectives","openBlock","createBlock","withModifiers","createVNode","createCommentVNode","withCtx","Fragment","renderList","vShow","onMounted","onBeforeUnmount","onUpdated","computed","toDisplayString","ElCollapseTransition","ElCheckbox","mitt","removeClass","addClass","on","off","EVENT_CODE","useLocaleInject","EMPTY_OBJ","process","env","NODE_ENV","Object","freeze","EMPTY_ARR","hasOwnProperty","prototype","hasOwn","val","key","call","NODE_KEY","markNodeData","node","data","defineProperty","value","id","enumerable","configurable","writable","getNodeKey","getChildState","all","none","allWithoutDisable","i","j","length","n","checked","indeterminate","disabled","half","reInitChecked","childNodes","parent","level","store","checkStrictly","getPropertyFromData","prop","props","config","dataProp","nodeIdSeed","Node","constructor","options","text","expanded","visible","isCurrent","canFocus","name","loaded","loading","initialize","Error","registerNode","isLeaf","isLeafByUser","lazy","setData","defaultExpandAll","expand","Array","isArray","defaultExpandedKeys","indexOf","autoExpandParent","currentNodeKey","currentNode","_initDefaultCheckedNode","updateLeafState","children","insertChild","label","nodeKey","nextSibling","index","previousSibling","contains","target","deep","some","child","remove","removeChild","batch","getChildren","push","splice","assign","insertBefore","insertAfter","dataIndex","deregisterNode","removeChildByData","targetNode","callback","expandParent","done","forEach","item","shouldLoadData","loadData","setChecked","doCreateChildren","array","defaultProps","collapse","load","recursion","passValue","checkDescendants","handleDescendants","isCheck","all2","forceInit","updateChildren","newData","oldData","map","newDataMap","newNodes","isNodeExists","findIndex","keys","resolve","TreeStore","option","nodesMap","root","loadFn","_initDefaultCheckedNodes","filter","filterNodeMethod","traverse","allHidden","newVal","instanceChanged","getNode","refData","refNode","append","parentData","parentNode","defaultCheckedKeys","checkedKey","setDefaultCheckedKey","getCheckedNodes","leafOnly","includeHalfChecked","checkedNodes","getCheckedKeys","getHalfCheckedNodes","nodes","getHalfCheckedKeys","_getAllNodes","allNodes","_setCheckedKeys","checkedKeys","sort","a","b","cache","create","toString","node2","setCheckedNodes","setCheckedKeys","key2","setDefaultExpandedKeys","getCurrentNode","setCurrentNode","prevCurrentNode","setUserCurrentNode","shouldAutoExpandParent","currNode","setCurrentNodeKey","script","type","required","renderContent","Function","setup","nodeInstance","tree","_self","ctx","slots","default","class","__file","useNodeExpandEventBroadcast","parentNodeMap","currentNodeMap","treeNodeExpand","broadcastExpanded","accordion","childNode","useDragNodeHandler","el$","dropIndicator$","emitter","dragState","showDropIndicator","draggingNode","dropNode","allowDrop","dropType","event","treeNode","allowDrag","preventDefault","dataTransfer","effectAllowed","e","emit","oldDropNode","$el","dropPrev","dropInner","dropNext","userAllowDropInner","dropEffect","targetPosition","getBoundingClientRect","treePosition","prevPercent","nextPercent","indicatorTop","distance","clientY","top","height","iconPosition","querySelector","dropIndicator","bottom","style","left","right","draggingNodeCopy","useDragNodeEmitter","script$1","components","NodeContent","Boolean","renderAfterExpand","showCheckbox","emits","childNodeRendered","oldChecked","oldIndeterminate","node$","instance","console","warn","childrenKey","handleSelectChange","getNodeKey$1","handleClick","expandOnClickNode","handleExpandIconClick","checkOnClickNode","handleCheckChange","handleContextMenu","vnode","stopPropagation","ev","halfCheckedNodes","halfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","handleDragOver","handleDrop","handleDragEnd","_hoisted_1","render","_ctx","_cache","$props","$setup","$data","$options","_component_el_checkbox","_component_node_content","_component_el_tree_node","_component_el_collapse_transition","role","tabindex","onClick","args","onContextmenu","onDragstart","onDragover","onDragend","onDrop","indent","iconClass","onChange","onNodeExpand","_","useKeydown","treeItems","checkboxItems","initTabIndex","handleKeydown","from","querySelectorAll","checkbox","setAttribute","currentItem","className","code","currentIndex","nextIndex","up","down","startIndex","dataset","focus","click","hasInput","enter","space","_a","checkedItem","script$2","ElTreeNode","emptyText","String","Number","highlightCurrent","t","isEmpty","every","getNodePath","path","reverse","currentNode2","getCurrentKey","setCurrentKey","handleNodeExpand","updateKeyChildren","_hoisted_1$1","_hoisted_2","_hoisted_3","render$1","install","app","component","_Tree"],"sources":["/home/jisra/Documents/escom/is/is_vue_frontend/node_modules/element-plus/es/el-tree/index.js"],"sourcesContent":["import { reactive, defineComponent, inject, h, provide, ref, getCurrentInstance, watch, nextTick, resolveComponent, withDirectives, openBlock, createBlock, withModifiers, createVNode, createCommentVNode, withCtx, Fragment, renderList, vShow, onMounted, onBeforeUnmount, onUpdated, computed, toDisplayString } from 'vue';\nimport ElCollapseTransition from '../el-collapse-transition';\nimport ElCheckbox from '../el-checkbox';\nimport mitt from 'mitt';\nimport { removeClass, addClass, on, off } from '../utils/dom';\nimport { EVENT_CODE } from '../utils/aria';\nimport { useLocaleInject } from '../hooks';\n\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nconst EMPTY_OBJ = (process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\nconst EMPTY_ARR = (process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\n\nconst NODE_KEY = \"$treeNodeId\";\nconst markNodeData = function(node, data) {\n  if (!data || data[NODE_KEY])\n    return;\n  Object.defineProperty(data, NODE_KEY, {\n    value: node.id,\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n};\nconst getNodeKey = function(key, data) {\n  if (!key)\n    return data[NODE_KEY];\n  return data[key];\n};\n\nconst getChildState = (node) => {\n  let all = true;\n  let none = true;\n  let allWithoutDisable = true;\n  for (let i = 0, j = node.length; i < j; i++) {\n    const n = node[i];\n    if (n.checked !== true || n.indeterminate) {\n      all = false;\n      if (!n.disabled) {\n        allWithoutDisable = false;\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false;\n    }\n  }\n  return { all, none, allWithoutDisable, half: !all && !none };\n};\nconst reInitChecked = function(node) {\n  if (node.childNodes.length === 0)\n    return;\n  const { all, none, half } = getChildState(node.childNodes);\n  if (all) {\n    node.checked = true;\n    node.indeterminate = false;\n  } else if (half) {\n    node.checked = false;\n    node.indeterminate = true;\n  } else if (none) {\n    node.checked = false;\n    node.indeterminate = false;\n  }\n  const parent = node.parent;\n  if (!parent || parent.level === 0)\n    return;\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent);\n  }\n};\nconst getPropertyFromData = function(node, prop) {\n  const props = node.store.props;\n  const data = node.data || {};\n  const config = props[prop];\n  if (typeof config === \"function\") {\n    return config(data, node);\n  } else if (typeof config === \"string\") {\n    return data[config];\n  } else if (typeof config === \"undefined\") {\n    const dataProp = data[prop];\n    return dataProp === void 0 ? \"\" : dataProp;\n  }\n};\nlet nodeIdSeed = 0;\nclass Node {\n  constructor(options) {\n    this.id = nodeIdSeed++;\n    this.text = null;\n    this.checked = false;\n    this.indeterminate = false;\n    this.data = null;\n    this.expanded = false;\n    this.parent = null;\n    this.visible = true;\n    this.isCurrent = false;\n    this.canFocus = false;\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name];\n      }\n    }\n    this.level = 0;\n    this.loaded = false;\n    this.childNodes = [];\n    this.loading = false;\n    if (this.parent) {\n      this.level = this.parent.level + 1;\n    }\n  }\n  initialize() {\n    const store = this.store;\n    if (!store) {\n      throw new Error(\"[Node]store is required!\");\n    }\n    store.registerNode(this);\n    const props = store.props;\n    if (props && typeof props.isLeaf !== \"undefined\") {\n      const isLeaf = getPropertyFromData(this, \"isLeaf\");\n      if (typeof isLeaf === \"boolean\") {\n        this.isLeafByUser = isLeaf;\n      }\n    }\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data);\n      if (store.defaultExpandAll) {\n        this.expanded = true;\n        this.canFocus = true;\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand();\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data);\n    }\n    if (!this.data)\n      return;\n    const defaultExpandedKeys = store.defaultExpandedKeys;\n    const key = store.key;\n    if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {\n      this.expand(null, store.autoExpandParent);\n    }\n    if (key && store.currentNodeKey !== void 0 && this.key === store.currentNodeKey) {\n      store.currentNode = this;\n      store.currentNode.isCurrent = true;\n    }\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this);\n    }\n    this.updateLeafState();\n    if (this.parent && (this.level === 1 || this.parent.expanded === true))\n      this.canFocus = true;\n  }\n  setData(data) {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data);\n    }\n    this.data = data;\n    this.childNodes = [];\n    let children;\n    if (this.level === 0 && this.data instanceof Array) {\n      children = this.data;\n    } else {\n      children = getPropertyFromData(this, \"children\") || [];\n    }\n    for (let i = 0, j = children.length; i < j; i++) {\n      this.insertChild({ data: children[i] });\n    }\n  }\n  get label() {\n    return getPropertyFromData(this, \"label\");\n  }\n  get key() {\n    const nodeKey = this.store.key;\n    if (this.data)\n      return this.data[nodeKey];\n    return null;\n  }\n  get disabled() {\n    return getPropertyFromData(this, \"disabled\");\n  }\n  get nextSibling() {\n    const parent = this.parent;\n    if (parent) {\n      const index = parent.childNodes.indexOf(this);\n      if (index > -1) {\n        return parent.childNodes[index + 1];\n      }\n    }\n    return null;\n  }\n  get previousSibling() {\n    const parent = this.parent;\n    if (parent) {\n      const index = parent.childNodes.indexOf(this);\n      if (index > -1) {\n        return index > 0 ? parent.childNodes[index - 1] : null;\n      }\n    }\n    return null;\n  }\n  contains(target, deep = true) {\n    return (this.childNodes || []).some((child) => child === target || deep && child.contains(target));\n  }\n  remove() {\n    const parent = this.parent;\n    if (parent) {\n      parent.removeChild(this);\n    }\n  }\n  insertChild(child, index, batch) {\n    if (!child)\n      throw new Error(\"insertChild error: child is required.\");\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        const children = this.getChildren(true);\n        if (children.indexOf(child.data) === -1) {\n          if (typeof index === \"undefined\" || index < 0) {\n            children.push(child.data);\n          } else {\n            children.splice(index, 0, child.data);\n          }\n        }\n      }\n      Object.assign(child, {\n        parent: this,\n        store: this.store\n      });\n      child = reactive(new Node(child));\n      if (child instanceof Node) {\n        child.initialize();\n      }\n    }\n    child.level = this.level + 1;\n    if (typeof index === \"undefined\" || index < 0) {\n      this.childNodes.push(child);\n    } else {\n      this.childNodes.splice(index, 0, child);\n    }\n    this.updateLeafState();\n  }\n  insertBefore(child, ref) {\n    let index;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n    }\n    this.insertChild(child, index);\n  }\n  insertAfter(child, ref) {\n    let index;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n      if (index !== -1)\n        index += 1;\n    }\n    this.insertChild(child, index);\n  }\n  removeChild(child) {\n    const children = this.getChildren() || [];\n    const dataIndex = children.indexOf(child.data);\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1);\n    }\n    const index = this.childNodes.indexOf(child);\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child);\n      child.parent = null;\n      this.childNodes.splice(index, 1);\n    }\n    this.updateLeafState();\n  }\n  removeChildByData(data) {\n    let targetNode = null;\n    for (let i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i];\n        break;\n      }\n    }\n    if (targetNode) {\n      this.removeChild(targetNode);\n    }\n  }\n  expand(callback, expandParent) {\n    const done = () => {\n      if (expandParent) {\n        let parent = this.parent;\n        while (parent.level > 0) {\n          parent.expanded = true;\n          parent = parent.parent;\n        }\n      }\n      this.expanded = true;\n      if (callback)\n        callback();\n      this.childNodes.forEach((item) => {\n        item.canFocus = true;\n      });\n    };\n    if (this.shouldLoadData()) {\n      this.loadData((data) => {\n        if (Array.isArray(data)) {\n          if (this.checked) {\n            this.setChecked(true, true);\n          } else if (!this.store.checkStrictly) {\n            reInitChecked(this);\n          }\n          done();\n        }\n      });\n    } else {\n      done();\n    }\n  }\n  doCreateChildren(array, defaultProps = {}) {\n    array.forEach((item) => {\n      this.insertChild(Object.assign({ data: item }, defaultProps), void 0, true);\n    });\n  }\n  collapse() {\n    this.expanded = false;\n    this.childNodes.forEach((item) => {\n      item.canFocus = false;\n    });\n  }\n  shouldLoadData() {\n    return this.store.lazy === true && this.store.load && !this.loaded;\n  }\n  updateLeafState() {\n    if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== \"undefined\") {\n      this.isLeaf = this.isLeafByUser;\n      return;\n    }\n    const childNodes = this.childNodes;\n    if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {\n      this.isLeaf = !childNodes || childNodes.length === 0;\n      return;\n    }\n    this.isLeaf = false;\n  }\n  setChecked(value, deep, recursion, passValue) {\n    this.indeterminate = value === \"half\";\n    this.checked = value === true;\n    if (this.store.checkStrictly)\n      return;\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      const { all, allWithoutDisable } = getChildState(this.childNodes);\n      if (!this.isLeaf && (!all && allWithoutDisable)) {\n        this.checked = false;\n        value = false;\n      }\n      const handleDescendants = () => {\n        if (deep) {\n          const childNodes = this.childNodes;\n          for (let i = 0, j = childNodes.length; i < j; i++) {\n            const child = childNodes[i];\n            passValue = passValue || value !== false;\n            const isCheck = child.disabled ? child.checked : passValue;\n            child.setChecked(isCheck, deep, true, passValue);\n          }\n          const { half, all: all2 } = getChildState(childNodes);\n          if (!all2) {\n            this.checked = all2;\n            this.indeterminate = half;\n          }\n        }\n      };\n      if (this.shouldLoadData()) {\n        this.loadData(() => {\n          handleDescendants();\n          reInitChecked(this);\n        }, {\n          checked: value !== false\n        });\n        return;\n      } else {\n        handleDescendants();\n      }\n    }\n    const parent = this.parent;\n    if (!parent || parent.level === 0)\n      return;\n    if (!recursion) {\n      reInitChecked(parent);\n    }\n  }\n  getChildren(forceInit = false) {\n    if (this.level === 0)\n      return this.data;\n    const data = this.data;\n    if (!data)\n      return null;\n    const props = this.store.props;\n    let children = \"children\";\n    if (props) {\n      children = props.children || \"children\";\n    }\n    if (data[children] === void 0) {\n      data[children] = null;\n    }\n    if (forceInit && !data[children]) {\n      data[children] = [];\n    }\n    return data[children];\n  }\n  updateChildren() {\n    const newData = this.getChildren() || [];\n    const oldData = this.childNodes.map((node) => node.data);\n    const newDataMap = {};\n    const newNodes = [];\n    newData.forEach((item, index) => {\n      const key = item[NODE_KEY];\n      const isNodeExists = !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0;\n      if (isNodeExists) {\n        newDataMap[key] = { index, data: item };\n      } else {\n        newNodes.push({ index, data: item });\n      }\n    });\n    if (!this.store.lazy) {\n      oldData.forEach((item) => {\n        if (!newDataMap[item[NODE_KEY]])\n          this.removeChildByData(item);\n      });\n    }\n    newNodes.forEach(({ index, data }) => {\n      this.insertChild({ data }, index);\n    });\n    this.updateLeafState();\n  }\n  loadData(callback, defaultProps = {}) {\n    if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {\n      this.loading = true;\n      const resolve = (children) => {\n        this.loaded = true;\n        this.loading = false;\n        this.childNodes = [];\n        this.doCreateChildren(children, defaultProps);\n        this.updateLeafState();\n        if (callback) {\n          callback.call(this, children);\n        }\n      };\n      this.store.load(this, resolve);\n    } else {\n      if (callback) {\n        callback.call(this);\n      }\n    }\n  }\n}\n\nclass TreeStore {\n  constructor(options) {\n    this.currentNode = null;\n    this.currentNodeKey = null;\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n    this.nodesMap = {};\n  }\n  initialize() {\n    this.root = new Node({\n      data: this.data,\n      store: this\n    });\n    this.root.initialize();\n    if (this.lazy && this.load) {\n      const loadFn = this.load;\n      loadFn(this.root, (data) => {\n        this.root.doCreateChildren(data);\n        this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n  filter(value) {\n    const filterNodeMethod = this.filterNodeMethod;\n    const lazy = this.lazy;\n    const traverse = function(node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach((child) => {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n        traverse(child);\n      });\n      if (!node.visible && childNodes.length) {\n        let allHidden = true;\n        allHidden = !childNodes.some((child) => child.visible);\n        if (node.root) {\n          node.root.visible = allHidden === false;\n        } else {\n          node.visible = allHidden === false;\n        }\n      }\n      if (!value)\n        return;\n      if (node.visible && !node.isLeaf && !lazy)\n        node.expand();\n    };\n    traverse(this);\n  }\n  setData(newVal) {\n    const instanceChanged = newVal !== this.root.data;\n    if (instanceChanged) {\n      this.root.setData(newVal);\n      this._initDefaultCheckedNodes();\n    } else {\n      this.root.updateChildren();\n    }\n  }\n  getNode(data) {\n    if (data instanceof Node)\n      return data;\n    const key = typeof data !== \"object\" ? data : getNodeKey(this.key, data);\n    return this.nodesMap[key] || null;\n  }\n  insertBefore(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertBefore({ data }, refNode);\n  }\n  insertAfter(data, refData) {\n    const refNode = this.getNode(refData);\n    refNode.parent.insertAfter({ data }, refNode);\n  }\n  remove(data) {\n    const node = this.getNode(data);\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null;\n      }\n      node.parent.removeChild(node);\n    }\n  }\n  append(data, parentData) {\n    const parentNode = parentData ? this.getNode(parentData) : this.root;\n    if (parentNode) {\n      parentNode.insertChild({ data });\n    }\n  }\n  _initDefaultCheckedNodes() {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    const nodesMap = this.nodesMap;\n    defaultCheckedKeys.forEach((checkedKey) => {\n      const node = nodesMap[checkedKey];\n      if (node) {\n        node.setChecked(true, !this.checkStrictly);\n      }\n    });\n  }\n  _initDefaultCheckedNode(node) {\n    const defaultCheckedKeys = this.defaultCheckedKeys || [];\n    if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  }\n  setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n      this._initDefaultCheckedNodes();\n    }\n  }\n  registerNode(node) {\n    const key = this.key;\n    if (!node || !node.data)\n      return;\n    if (!key) {\n      this.nodesMap[node.id] = node;\n    } else {\n      const nodeKey = node.key;\n      if (nodeKey !== void 0)\n        this.nodesMap[node.key] = node;\n    }\n  }\n  deregisterNode(node) {\n    const key = this.key;\n    if (!key || !node || !node.data)\n      return;\n    node.childNodes.forEach((child) => {\n      this.deregisterNode(child);\n    });\n    delete this.nodesMap[node.key];\n  }\n  getCheckedNodes(leafOnly = false, includeHalfChecked = false) {\n    const checkedNodes = [];\n    const traverse = function(node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach((child) => {\n        if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n          checkedNodes.push(child.data);\n        }\n        traverse(child);\n      });\n    };\n    traverse(this);\n    return checkedNodes;\n  }\n  getCheckedKeys(leafOnly = false) {\n    return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key]);\n  }\n  getHalfCheckedNodes() {\n    const nodes = [];\n    const traverse = function(node) {\n      const childNodes = node.root ? node.root.childNodes : node.childNodes;\n      childNodes.forEach((child) => {\n        if (child.indeterminate) {\n          nodes.push(child.data);\n        }\n        traverse(child);\n      });\n    };\n    traverse(this);\n    return nodes;\n  }\n  getHalfCheckedKeys() {\n    return this.getHalfCheckedNodes().map((data) => (data || {})[this.key]);\n  }\n  _getAllNodes() {\n    const allNodes = [];\n    const nodesMap = this.nodesMap;\n    for (const nodeKey in nodesMap) {\n      if (hasOwn(nodesMap, nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n    return allNodes;\n  }\n  updateChildren(key, data) {\n    const node = this.nodesMap[key];\n    if (!node)\n      return;\n    const childNodes = node.childNodes;\n    for (let i = childNodes.length - 1; i >= 0; i--) {\n      const child = childNodes[i];\n      this.remove(child.data);\n    }\n    for (let i = 0, j = data.length; i < j; i++) {\n      const child = data[i];\n      this.append(child, node.data);\n    }\n  }\n  _setCheckedKeys(key, leafOnly = false, checkedKeys) {\n    const allNodes = this._getAllNodes().sort((a, b) => b.level - a.level);\n    const cache = Object.create(null);\n    const keys = Object.keys(checkedKeys);\n    allNodes.forEach((node) => node.setChecked(false, false));\n    for (let i = 0, j = allNodes.length; i < j; i++) {\n      const node = allNodes[i];\n      const nodeKey = node.data[key].toString();\n      const checked = keys.indexOf(nodeKey) > -1;\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false);\n        }\n        continue;\n      }\n      let parent = node.parent;\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true;\n        parent = parent.parent;\n      }\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false);\n        continue;\n      }\n      node.setChecked(true, true);\n      if (leafOnly) {\n        node.setChecked(false, false);\n        const traverse = function(node2) {\n          const childNodes = node2.childNodes;\n          childNodes.forEach((child) => {\n            if (!child.isLeaf) {\n              child.setChecked(false, false);\n            }\n            traverse(child);\n          });\n        };\n        traverse(node);\n      }\n    }\n  }\n  setCheckedNodes(array, leafOnly = false) {\n    const key = this.key;\n    const checkedKeys = {};\n    array.forEach((item) => {\n      checkedKeys[(item || {})[key]] = true;\n    });\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n  setCheckedKeys(keys, leafOnly = false) {\n    this.defaultCheckedKeys = keys;\n    const key = this.key;\n    const checkedKeys = {};\n    keys.forEach((key2) => {\n      checkedKeys[key2] = true;\n    });\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  }\n  setDefaultExpandedKeys(keys) {\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n    keys.forEach((key) => {\n      const node = this.getNode(key);\n      if (node)\n        node.expand(null, this.autoExpandParent);\n    });\n  }\n  setChecked(data, checked, deep) {\n    const node = this.getNode(data);\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  }\n  getCurrentNode() {\n    return this.currentNode;\n  }\n  setCurrentNode(currentNode) {\n    const prevCurrentNode = this.currentNode;\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false;\n    }\n    this.currentNode = currentNode;\n    this.currentNode.isCurrent = true;\n  }\n  setUserCurrentNode(node, shouldAutoExpandParent = true) {\n    const key = node[this.key];\n    const currNode = this.nodesMap[key];\n    this.setCurrentNode(currNode);\n    if (shouldAutoExpandParent && this.currentNode.level > 1) {\n      this.currentNode.parent.expand(null, true);\n    }\n  }\n  setCurrentNodeKey(key, shouldAutoExpandParent = true) {\n    if (key === null || key === void 0) {\n      this.currentNode && (this.currentNode.isCurrent = false);\n      this.currentNode = null;\n      return;\n    }\n    const node = this.getNode(key);\n    if (node) {\n      this.setCurrentNode(node);\n      if (shouldAutoExpandParent && this.currentNode.level > 1) {\n        this.currentNode.parent.expand(null, true);\n      }\n    }\n  }\n}\n\nvar script = defineComponent({\n  name: \"ElTreeNodeContent\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    renderContent: Function\n  },\n  setup(props) {\n    const nodeInstance = inject(\"NodeInstance\");\n    const tree = inject(\"RootTree\");\n    return () => {\n      const node = props.node;\n      const { data, store } = node;\n      return props.renderContent ? props.renderContent(h, { _self: nodeInstance, node, data, store }) : tree.ctx.slots.default ? tree.ctx.slots.default({ node, data }) : h(\"span\", { class: \"el-tree-node__label\" }, [node.label]);\n    };\n  }\n});\n\nscript.__file = \"packages/tree/src/tree-node-content.vue\";\n\nfunction useNodeExpandEventBroadcast(props) {\n  const parentNodeMap = inject(\"TreeNodeMap\", null);\n  const currentNodeMap = {\n    treeNodeExpand: (node) => {\n      if (props.node !== node) {\n        props.node.collapse();\n      }\n    },\n    children: []\n  };\n  if (parentNodeMap) {\n    parentNodeMap.children.push(currentNodeMap);\n  }\n  provide(\"TreeNodeMap\", currentNodeMap);\n  return {\n    broadcastExpanded: (node) => {\n      if (!props.accordion)\n        return;\n      for (const childNode of currentNodeMap.children) {\n        childNode.treeNodeExpand(node);\n      }\n    }\n  };\n}\n\nfunction useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {\n  const emitter = mitt();\n  provide(\"DragNodeEmitter\", emitter);\n  const dragState = ref({\n    showDropIndicator: false,\n    draggingNode: null,\n    dropNode: null,\n    allowDrop: true,\n    dropType: null\n  });\n  emitter.on(\"tree-node-drag-start\", ({ event, treeNode }) => {\n    if (typeof props.allowDrag === \"function\" && !props.allowDrag(treeNode.node)) {\n      event.preventDefault();\n      return false;\n    }\n    event.dataTransfer.effectAllowed = \"move\";\n    try {\n      event.dataTransfer.setData(\"text/plain\", \"\");\n    } catch (e) {\n    }\n    dragState.value.draggingNode = treeNode;\n    ctx.emit(\"node-drag-start\", treeNode.node, event);\n  });\n  emitter.on(\"tree-node-drag-over\", ({ event, treeNode }) => {\n    const dropNode = treeNode;\n    const oldDropNode = dragState.value.dropNode;\n    if (oldDropNode && oldDropNode !== dropNode) {\n      removeClass(oldDropNode.$el, \"is-drop-inner\");\n    }\n    const draggingNode = dragState.value.draggingNode;\n    if (!draggingNode || !dropNode)\n      return;\n    let dropPrev = true;\n    let dropInner = true;\n    let dropNext = true;\n    let userAllowDropInner = true;\n    if (typeof props.allowDrop === \"function\") {\n      dropPrev = props.allowDrop(draggingNode.node, dropNode.node, \"prev\");\n      userAllowDropInner = dropInner = props.allowDrop(draggingNode.node, dropNode.node, \"inner\");\n      dropNext = props.allowDrop(draggingNode.node, dropNode.node, \"next\");\n    }\n    event.dataTransfer.dropEffect = dropInner ? \"move\" : \"none\";\n    if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n      if (oldDropNode) {\n        ctx.emit(\"node-drag-leave\", draggingNode.node, oldDropNode.node, event);\n      }\n      ctx.emit(\"node-drag-enter\", draggingNode.node, dropNode.node, event);\n    }\n    if (dropPrev || dropInner || dropNext) {\n      dragState.value.dropNode = dropNode;\n    }\n    if (dropNode.node.nextSibling === draggingNode.node) {\n      dropNext = false;\n    }\n    if (dropNode.node.previousSibling === draggingNode.node) {\n      dropPrev = false;\n    }\n    if (dropNode.node.contains(draggingNode.node, false)) {\n      dropInner = false;\n    }\n    if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n      dropPrev = false;\n      dropInner = false;\n      dropNext = false;\n    }\n    const targetPosition = dropNode.$el.getBoundingClientRect();\n    const treePosition = el$.value.getBoundingClientRect();\n    let dropType;\n    const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n    const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n    let indicatorTop = -9999;\n    const distance = event.clientY - targetPosition.top;\n    if (distance < targetPosition.height * prevPercent) {\n      dropType = \"before\";\n    } else if (distance > targetPosition.height * nextPercent) {\n      dropType = \"after\";\n    } else if (dropInner) {\n      dropType = \"inner\";\n    } else {\n      dropType = \"none\";\n    }\n    const iconPosition = dropNode.$el.querySelector(\".el-tree-node__expand-icon\").getBoundingClientRect();\n    const dropIndicator = dropIndicator$.value;\n    if (dropType === \"before\") {\n      indicatorTop = iconPosition.top - treePosition.top;\n    } else if (dropType === \"after\") {\n      indicatorTop = iconPosition.bottom - treePosition.top;\n    }\n    dropIndicator.style.top = indicatorTop + \"px\";\n    dropIndicator.style.left = iconPosition.right - treePosition.left + \"px\";\n    if (dropType === \"inner\") {\n      addClass(dropNode.$el, \"is-drop-inner\");\n    } else {\n      removeClass(dropNode.$el, \"is-drop-inner\");\n    }\n    dragState.value.showDropIndicator = dropType === \"before\" || dropType === \"after\";\n    dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;\n    dragState.value.dropType = dropType;\n    ctx.emit(\"node-drag-over\", draggingNode.node, dropNode.node, event);\n  });\n  emitter.on(\"tree-node-drag-end\", (event) => {\n    const { draggingNode, dropType, dropNode } = dragState.value;\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n    if (draggingNode && dropNode) {\n      const draggingNodeCopy = { data: draggingNode.node.data };\n      if (dropType !== \"none\") {\n        draggingNode.node.remove();\n      }\n      if (dropType === \"before\") {\n        dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"after\") {\n        dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n      } else if (dropType === \"inner\") {\n        dropNode.node.insertChild(draggingNodeCopy);\n      }\n      if (dropType !== \"none\") {\n        store.value.registerNode(draggingNodeCopy);\n      }\n      removeClass(dropNode.$el, \"is-drop-inner\");\n      ctx.emit(\"node-drag-end\", draggingNode.node, dropNode.node, dropType, event);\n      if (dropType !== \"none\") {\n        ctx.emit(\"node-drop\", draggingNode.node, dropNode.node, dropType, event);\n      }\n    }\n    if (draggingNode && !dropNode) {\n      ctx.emit(\"node-drag-end\", draggingNode.node, null, dropType, event);\n    }\n    dragState.value.showDropIndicator = false;\n    dragState.value.draggingNode = null;\n    dragState.value.dropNode = null;\n    dragState.value.allowDrop = true;\n  });\n  return {\n    dragState\n  };\n}\nfunction useDragNodeEmitter() {\n  const emitter = inject(\"DragNodeEmitter\");\n  return {\n    emitter\n  };\n}\n\nvar script$1 = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent: script\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const { emitter } = useDragNodeEmitter();\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      console.warn(\"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, (val) => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, (val) => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, (val) => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = (node) => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = () => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance);\n    };\n    const handleContextMenu = (event) => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf)\n        return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = (event) => {\n      if (!tree.props.draggable)\n        return;\n      emitter.emit(\"tree-node-drag-start\", { event, treeNode: props });\n    };\n    const handleDragOver = (event) => {\n      if (!tree.props.draggable)\n        return;\n      emitter.emit(\"tree-node-drag-over\", { event, treeNode: { $el: node$.value, node: props.node } });\n      event.preventDefault();\n    };\n    const handleDrop = (event) => {\n      event.preventDefault();\n    };\n    const handleDragEnd = (event) => {\n      if (!tree.props.draggable)\n        return;\n      emitter.emit(\"tree-node-drag-end\", event);\n    };\n    return {\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      emitter,\n      getNodeKey: getNodeKey$1,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd\n    };\n  }\n});\n\nconst _hoisted_1 = {\n  key: 1,\n  class: \"el-tree-node__loading-icon el-icon-loading\"\n};\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createBlock(\"div\", {\n    ref: \"node$\",\n    class: [\"el-tree-node\", {\n      \"is-expanded\": _ctx.expanded,\n      \"is-current\": _ctx.node.isCurrent,\n      \"is-hidden\": !_ctx.node.visible,\n      \"is-focusable\": !_ctx.node.disabled,\n      \"is-checked\": !_ctx.node.disabled && _ctx.node.checked\n    }],\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[4] || (_cache[4] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[7] || (_cache[7] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[8] || (_cache[8] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [\n    createVNode(\"div\", {\n      class: \"el-tree-node__content\",\n      style: { \"padding-left\": (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\" }\n    }, [\n      createVNode(\"span\", {\n        class: [\n          {\n            \"is-leaf\": _ctx.node.isLeaf,\n            expanded: !_ctx.node.isLeaf && _ctx.expanded\n          },\n          \"el-tree-node__expand-icon\",\n          _ctx.tree.props.iconClass ? _ctx.tree.props.iconClass : \"el-icon-caret-right\"\n        ],\n        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleExpandIconClick && _ctx.handleExpandIconClick(...args), [\"stop\"]))\n      }, null, 2),\n      _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n        key: 0,\n        \"model-value\": _ctx.node.checked,\n        indeterminate: _ctx.node.indeterminate,\n        disabled: !!_ctx.node.disabled,\n        onClick: _cache[2] || (_cache[2] = withModifiers(() => {\n        }, [\"stop\"])),\n        onChange: _ctx.handleCheckChange\n      }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true),\n      _ctx.node.loading ? (openBlock(), createBlock(\"span\", _hoisted_1)) : createCommentVNode(\"v-if\", true),\n      createVNode(_component_node_content, {\n        node: _ctx.node,\n        \"render-content\": _ctx.renderContent\n      }, null, 8, [\"node\", \"render-content\"])\n    ], 4),\n    createVNode(_component_el_collapse_transition, null, {\n      default: withCtx(() => [\n        !_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createBlock(\"div\", {\n          key: 0,\n          class: \"el-tree-node__children\",\n          role: \"group\",\n          \"aria-expanded\": _ctx.expanded\n        }, [\n          (openBlock(true), createBlock(Fragment, null, renderList(_ctx.node.childNodes, (child) => {\n            return openBlock(), createBlock(_component_el_tree_node, {\n              key: _ctx.getNodeKey(child),\n              \"render-content\": _ctx.renderContent,\n              \"render-after-expand\": _ctx.renderAfterExpand,\n              \"show-checkbox\": _ctx.showCheckbox,\n              node: child,\n              onNodeExpand: _ctx.handleChildNodeExpand\n            }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"onNodeExpand\"]);\n          }), 128))\n        ], 8, [\"aria-expanded\"])), [\n          [vShow, _ctx.expanded]\n        ]) : createCommentVNode(\"v-if\", true)\n      ]),\n      _: 1\n    })\n  ], 42, [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"])), [\n    [vShow, _ctx.node.visible]\n  ]);\n}\n\nscript$1.render = render;\nscript$1.__file = \"packages/tree/src/tree-node.vue\";\n\nfunction useKeydown({ el$ }, store) {\n  const treeItems = ref([]);\n  const checkboxItems = ref([]);\n  onMounted(() => {\n    initTabIndex();\n    on(el$.value, \"keydown\", handleKeydown);\n  });\n  onBeforeUnmount(() => {\n    off(el$.value, \"keydown\", handleKeydown);\n  });\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n  const handleKeydown = (ev) => {\n    const currentItem = ev.target;\n    if (currentItem.className.indexOf(\"el-tree-node\") === -1)\n      return;\n    const code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    const currentIndex = treeItems.value.indexOf(currentItem);\n    let nextIndex;\n    if ([EVENT_CODE.up, EVENT_CODE.down].indexOf(code) > -1) {\n      ev.preventDefault();\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)\n            break;\n          nextIndex--;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        const startIndex = nextIndex;\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)\n            break;\n          nextIndex++;\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].indexOf(code) > -1) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n    const hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n    if ([EVENT_CODE.enter, EVENT_CODE.space].indexOf(code) > -1 && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n  const initTabIndex = () => {\n    var _a;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".is-focusable[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    const checkedItem = el$.value.querySelectorAll(\".is-checked[role=treeitem]\");\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\n\nvar script$2 = defineComponent({\n  name: \"ElTree\",\n  components: { ElTreeNode: script$1 },\n  props: {\n    data: {\n      type: Array\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default() {\n        return {\n          children: \"children\",\n          label: \"label\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    iconClass: String\n  },\n  emits: [\n    \"check-change\",\n    \"current-change\",\n    \"node-click\",\n    \"node-contextmenu\",\n    \"node-collapse\",\n    \"node-expand\",\n    \"check\",\n    \"node-drag-start\",\n    \"node-drag-end\",\n    \"node-drop\",\n    \"node-drag-leave\",\n    \"node-drag-enter\",\n    \"node-drag-over\"\n  ],\n  setup(props, ctx) {\n    const { t } = useLocaleInject();\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props);\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({ el$ }, store);\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({ visible }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, (newVal) => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, (newVal) => {\n      store.value.defaultExpandedKeys = newVal;\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, (newVal) => {\n      store.value.setData(newVal);\n    }, { deep: true });\n    watch(() => props.checkStrictly, (newVal) => {\n      store.value.checkStrictly = newVal;\n    });\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n    const getNodeKey$1 = (node) => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n    const getNodePath = (data) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node)\n        return [];\n      const path = [node.data];\n      let parent = node.parent;\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    };\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n    const getCheckedKeys = (leafOnly) => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n    const getCurrentKey = () => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n    const getNode = (data) => {\n      return store.value.getNode(data);\n    };\n    const remove = (data) => {\n      store.value.remove(data);\n    };\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey)\n        throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n});\n\nconst _hoisted_1$1 = {\n  key: 0,\n  class: \"el-tree__empty-block\"\n};\nconst _hoisted_2 = { class: \"el-tree__empty-text\" };\nconst _hoisted_3 = {\n  ref: \"dropIndicator$\",\n  class: \"el-tree__drop-indicator\"\n};\nfunction render$1(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  return openBlock(), createBlock(\"div\", {\n    ref: \"el$\",\n    class: [\"el-tree\", {\n      \"el-tree--highlight-current\": _ctx.highlightCurrent,\n      \"is-dragging\": !!_ctx.dragState.draggingNode,\n      \"is-drop-not-allow\": !_ctx.dragState.allowDrop,\n      \"is-drop-inner\": _ctx.dragState.dropType === \"inner\"\n    }],\n    role: \"tree\"\n  }, [\n    (openBlock(true), createBlock(Fragment, null, renderList(_ctx.root.childNodes, (child) => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        node: child,\n        props: _ctx.props,\n        accordion: _ctx.accordion,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        \"render-content\": _ctx.renderContent,\n        onNodeExpand: _ctx.handleNodeExpand\n      }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n    }), 128)),\n    _ctx.isEmpty ? (openBlock(), createBlock(\"div\", _hoisted_1$1, [\n      createVNode(\"span\", _hoisted_2, toDisplayString(_ctx.emptyText || _ctx.t(\"el.tree.emptyText\")), 1)\n    ])) : createCommentVNode(\"v-if\", true),\n    withDirectives(createVNode(\"div\", _hoisted_3, null, 512), [\n      [vShow, _ctx.dragState.showDropIndicator]\n    ])\n  ], 2);\n}\n\nscript$2.render = render$1;\nscript$2.__file = \"packages/tree/src/tree.vue\";\n\nscript$2.install = (app) => {\n  app.component(script$2.name, script$2);\n};\nconst _Tree = script$2;\n\nexport default _Tree;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}